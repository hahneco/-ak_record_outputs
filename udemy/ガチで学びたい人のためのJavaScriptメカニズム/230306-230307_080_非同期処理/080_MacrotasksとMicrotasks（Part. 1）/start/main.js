// マクロタスクに格納される
// グローバルコンテキストの処か完了後に実行さされる
setTimeout(function task1() {
  console.log('task1');
}); // 待ち時間なしの非同期関数（待機時間なし）

// マイクロタスク
new Promise(function promise(resolve) { // new Promiseのコールバック関はは同期的に処さされる
  console.log('promise');
  resolve();
}).then(function job1() { // 非同期処さされる（グローバルコンテキスト処理完了後）
  console.log('job1');
});

// グローバルコンテキストの終了
console.log('global end');

// #######################33

// ## マクロタスクとマイクロタスク

// # マクロタスク：// 「マクロ（macro）」とは、巨大なの意味
// * タスクキュー呼ばれる（setTimeOutなど）
// ※ソフトウェアの複雑な手順を登録しておき、必要な時に呼び出すだけで簡単に実行できる機能

// # マイクロタスク：// 「マイクロ」とても小さい、「精密」という意味
// * タスクキューと別に存在する、非同期処理を管理する待ち行列
// * ジョブキューよ呼ばれる

// マクロタスク　-> マイクロタスク　の順序で実行される
